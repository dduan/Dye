name: Continuous Integration

on: [push, pull_request]

jobs:
  macos:
    name: macOS
    runs-on: macOS-latest
    strategy:
      matrix:
        xcode:
          - 11.4
        action:
          - build
          - run-example
    steps:
    - uses: actions/checkout@v1
    - name: Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
    - name: Action
      run: make ${{ matrix.action }}

  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - 5.2
        ubuntu:
          - xenial
          - bionic
        action:
          - build
          - run-example
    steps:
    - uses: actions/checkout@v1
    - name: Action
      run: Scripts/ubuntu.sh ${{ matrix.action }} ${{ matrix.swift }} ${{ matrix.ubuntu }}
  Windows:
    runs-on: windows-2019
    steps:
    - name: Check out
      uses: actions/checkout@v1
    - name: Set up Visual Studio up
      shell: bash
      run: |
        set -x
        cd '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build'
        echo 'export -p > exported_environment.sh' > nested_bash.sh
        echo 'vcvarsall.bat x64 && "C:/Program Files/Git/usr/bin/bash" -c ./nested_bash.sh' > export_environment.bat
        cmd "/c export_environment.bat"
        set +x
        source ./exported_environment.sh
        set -x
        echo "::set-env name=PATH::${PATH}"
        echo "::set-env name=UniversalCRTSdkDir::${UniversalCRTSdkDir}"
        echo "::set-env name=UCRTVersion::${UCRTVersion}"
        echo "::set-env name=VCToolsInstallDir::${VCToolsInstallDir}"
    - name: Fetch WinSDK module maps
      shell: bash
      run: |
        set -x
        curl --location \
          'https://raw.githubusercontent.com/apple/swift/swift-5.2.1-RELEASE/stdlib/public/Platform/ucrt.modulemap' \
          --output "${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt/module.modulemap"
        curl --location \
          'https://raw.githubusercontent.com/apple/swift/swift-5.2.1-RELEASE/stdlib/public/Platform/visualc.modulemap' \
          --output "${VCToolsInstallDir}/include/module.modulemap"
        curl --location \
          'https://raw.githubusercontent.com/apple/swift/swift-5.2.1-RELEASE/stdlib/public/Platform/visualc.apinotes' \
          --output "${VCToolsInstallDir}/include/visualc.apinotes"
        curl --location \
          'https://raw.githubusercontent.com/apple/swift/swift-5.2.1-RELEASE/stdlib/public/Platform/winsdk.modulemap' \
          --output "${UniversalCRTSdkDir}/Include/${UCRTVersion}/um/module.modulemap"
    - name: Install ICU
      shell: bash
      run: |
        set -x
        curl --location \
          'https://github.com/compnerd/swift-build/releases/download/v5.2.1/icu.msi' \
          --output '/tmp/icu.msi'
        cd /tmp
        msiexec //i icu.msi
        export PATH="/c/Library/icu-64/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
    - name: Install Swift
      shell: bash
      run: |
        set -x
        curl --location \
          'https://github.com/compnerd/swift-build/releases/download/v5.2.1/toolchain.msi' \
          --output '/tmp/toolchain.msi'
        cd /tmp
        msiexec //i toolchain.msi
        curl --location \
          'https://github.com/compnerd/swift-build/releases/download/v5.2.1/sdk.msi' \
          --output '/tmp/sdk.msi'
        cd /tmp
        msiexec //i sdk.msi
        curl --location \
          'https://github.com/compnerd/swift-build/releases/download/v5.2.1/runtime.msi' \
          --output '/tmp/runtime.msi'
        cd /tmp
        msiexec //i runtime.msi
        export PATH="/c/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        export PATH="/c/Library/Swift-development/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        export PATH="/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/bin:${PATH}"
        echo "::set-env name=PATH::${PATH}"
        swift --version
    - name: Build and Test
      shell: cmd
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64 -host_arch=x64
        cmake -B .build\windows -D BUILD_SHARED_LIBS=YES -D BUILD_TESTING=YES -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=.build\Hello-windows-x64\Library\Hello-development\usr -D CMAKE_Swift_FLAGS="-sdk %SystemDrive%\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk -I %SystemDrive%\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk\usr\lib\swift -I %SystemDrive%\Library\Developer\Platforms\Windows.platform\Developer\Library\XCTest-development\usr\lib\swift\windows\x86_64 -L %SystemDrive%\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk\usr\lib\swift\windows -L %SystemDrive%\Library\Developer\Platforms\Windows.platform\Developer\Library\XCTest-development\usr\lib\swift\windows" -G Ninja -S .\ && cmake --build .build/windows && .build\windows\bin\example.exe
